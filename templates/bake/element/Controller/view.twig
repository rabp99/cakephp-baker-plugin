{#
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
{% set allAssociations = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'BelongsToMany')) %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'HasOne')) %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'HasMany')) %}
{% set primaryKey = ApiRest.getPrimaryKey(modelObj) %}
    /**
     * View method
     *
     * @param string|null $id {{ singularHumanName }} id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */   
{% if 'id' in primaryKey %}
    public function view($id = null) {
        $this->getRequest()->allowMethod("GET");
        ${{ singularName }} = $this->{{ currentModelName }}->get($id, [
            'contain' => {{ Bake.exportArray(allAssociations)|raw }},
        ]);
{% else %}
    public function view() {
        $this->getRequest()->allowMethod("GET");
{% for key in primaryKey %}
        ${{ key|variable }} = $this->getRequest()->getParam('{{ key }}');
{% endfor %}
        ${{ singularName }} = $this->{{ currentModelName }}->get([{{ ApiRest.getPrimaryKeyVars(primaryKey) }}], [
            'contain' => {{ Bake.exportArray(allAssociations)|raw }},
        ]);
{% endif %}

        $this->set(compact('{{ singularName }}'));
        $this->viewBuilder()->setOption('serialize', true);
    }
